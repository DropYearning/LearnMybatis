<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.dao.IUserDao">
    <!--配置查询-->
    <!--配置时需要说清楚封装到哪里去-->
    <!--查询所有用户-->
    <select id="findAll" resultType="User">
        select * from user
    </select>

    <!--保存用户-->
    <insert id="saveUser" parameterType="com.study.domain.User">
        <!--配置插入操作后，获取插入数据的id -->
        <!--keyProperty表示实体类的属性名 -->
        <!--keyColumn表示数据表列名 -->
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, address, sex, birthday)values(#{username}, #{address}, #{sex}, #{birthday});
    </insert>

    <!--更新用户-->
    <update id="updateUser" parameterType="com.study.domain.User">
        update user set username=#{username}, address=#{address}, sex=#{sex}, birthday=#{birthday} where id=#{id};
    </update>

    <!-- 删除用户-->
    <!--当id对应的方法只有一个参数的时候，SQL语句中只需要写一个任意的占位符即可-->
    <delete id="deleteUser" parameterType="java.lang.Integer">

        delete from user where id = #{anyword}
    </delete>

    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultType="com.study.domain.User">
        select * from user where id = #{anyword}
    </select>

    <!-- 根据名称模糊查询 -->
    <!--第一种SQL写法：select * from user where username like #{anyword}-->
    <!--使用第二种方法必须要写value作为参数-->
    <select id="findByName" parameterType="string" resultType="com.study.domain.User">
        select * from user where username like '%${value}%'
    </select>

    <!-- 获取用户的总记录条数 -->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>


</mapper>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.study.dao.IUserDao">

    <!-- 抽取出被重复使用的SQL语句-->
    <sql id="defaultUser">
        select * from user;
    </sql>


    <!--配置查询-->
    <!--配置时需要说清楚封装到哪里去-->
    <!--查询所有用户-->
    <select id="findAll" resultType="com.study.domain.User">
        <!--使用include引入配置好的SQL语句-->
        <include refid="defaultUser"></include>
        <!-- select * from user -->
    </select>

    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultType="com.study.domain.User">
        select * from user where id = #{anyword}
    </select>

    <!-- 根据名称模糊查询 -->
    <!--第一种SQL写法：select * from user where username like #{anyword}-->
    <!--使用第二种方法必须要写value作为参数-->
    <select id="findByName" parameterType="string" resultType="com.study.domain.User">
        select * from user where username like '%${value}%'
    </select>

    <!--根据QueryVo的条件查询用户-->
    <select id="findUserByVo" parameterType="com.study.domain.QueryVo" resultType="com.study.domain.User">
        select * from user where username like #{user.username}
    </select>

    <!--根据条件查询-->
    <!--
    where 1=1是sql语句条件逻辑判断表达式，
    由于1=1成立，恒为真，该表达式1=1将始终返回"真"。
    这种写法实际目的是为了获取逻辑值"True",其实诸如2=2, 1+2=3，'中'='中'等之类的写法都可以返回逻辑值"True"，
    只不过1=1的运算开销更小，故被应用的最普遍。
    -->
<!--    <select id="findUserByCondition" resultType="com.study.domain.User" parameterType="com.study.domain.User">-->
<!--        select * from user where 1=1-->
<!--        <if test="username != null">-->
<!--            and username = #{username}-->
<!--        </if>-->
<!--        <if test="sex != null">-->
<!--            and sex = #{sex}-->
<!--        </if>-->
<!--    </select>-->

    <!--使用where标签-->
    <select id="findUserByCondition" resultType="com.study.domain.User" parameterType="com.study.domain.User">
        select * from user
        <where>
            <if test="username != null">
                and username = #{username}
            </if>
            <if test="sex != null">
                and sex = #{sex}
            </if>
        </where>
    </select>

    <!--根据Queryvo中的Id集合查询用户列表-->
    <select id="findUserInIds" resultType="com.study.domain.User" parameterType="queryvo">
        select * from user
        <where>
            <if test="ids !=null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>

</mapper>